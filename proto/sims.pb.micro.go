// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sims.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Registrar service

func NewRegistrarEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Registrar service

type RegistrarService interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...client.CallOption) (*HeartbeatResponse, error)
	EventStream(ctx context.Context, in *EventStreamRequest, opts ...client.CallOption) (Registrar_EventStreamService, error)
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...client.CallOption) (*UnregisterResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
}

type registrarService struct {
	c    client.Client
	name string
}

func NewRegistrarService(name string, c client.Client) RegistrarService {
	return &registrarService{
		c:    c,
		name: name,
	}
}

func (c *registrarService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "Registrar.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrarService) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...client.CallOption) (*HeartbeatResponse, error) {
	req := c.c.NewRequest(c.name, "Registrar.Heartbeat", in)
	out := new(HeartbeatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrarService) EventStream(ctx context.Context, in *EventStreamRequest, opts ...client.CallOption) (Registrar_EventStreamService, error) {
	req := c.c.NewRequest(c.name, "Registrar.EventStream", &EventStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &registrarServiceEventStream{stream}, nil
}

type Registrar_EventStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Event, error)
}

type registrarServiceEventStream struct {
	stream client.Stream
}

func (x *registrarServiceEventStream) Close() error {
	return x.stream.Close()
}

func (x *registrarServiceEventStream) Context() context.Context {
	return x.stream.Context()
}

func (x *registrarServiceEventStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *registrarServiceEventStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *registrarServiceEventStream) Recv() (*Event, error) {
	m := new(Event)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registrarService) Unregister(ctx context.Context, in *UnregisterRequest, opts ...client.CallOption) (*UnregisterResponse, error) {
	req := c.c.NewRequest(c.name, "Registrar.Unregister", in)
	out := new(UnregisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrarService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "Registrar.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registrar service

type RegistrarHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Heartbeat(context.Context, *HeartbeatRequest, *HeartbeatResponse) error
	EventStream(context.Context, *EventStreamRequest, Registrar_EventStreamStream) error
	Unregister(context.Context, *UnregisterRequest, *UnregisterResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
}

func RegisterRegistrarHandler(s server.Server, hdlr RegistrarHandler, opts ...server.HandlerOption) error {
	type registrar interface {
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Heartbeat(ctx context.Context, in *HeartbeatRequest, out *HeartbeatResponse) error
		EventStream(ctx context.Context, stream server.Stream) error
		Unregister(ctx context.Context, in *UnregisterRequest, out *UnregisterResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
	}
	type Registrar struct {
		registrar
	}
	h := &registrarHandler{hdlr}
	return s.Handle(s.NewHandler(&Registrar{h}, opts...))
}

type registrarHandler struct {
	RegistrarHandler
}

func (h *registrarHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.RegistrarHandler.Register(ctx, in, out)
}

func (h *registrarHandler) Heartbeat(ctx context.Context, in *HeartbeatRequest, out *HeartbeatResponse) error {
	return h.RegistrarHandler.Heartbeat(ctx, in, out)
}

func (h *registrarHandler) EventStream(ctx context.Context, stream server.Stream) error {
	m := new(EventStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.RegistrarHandler.EventStream(ctx, m, &registrarEventStreamStream{stream})
}

type Registrar_EventStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Event) error
}

type registrarEventStreamStream struct {
	stream server.Stream
}

func (x *registrarEventStreamStream) Close() error {
	return x.stream.Close()
}

func (x *registrarEventStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *registrarEventStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *registrarEventStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *registrarEventStreamStream) Send(m *Event) error {
	return x.stream.Send(m)
}

func (h *registrarHandler) Unregister(ctx context.Context, in *UnregisterRequest, out *UnregisterResponse) error {
	return h.RegistrarHandler.Unregister(ctx, in, out)
}

func (h *registrarHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.RegistrarHandler.List(ctx, in, out)
}

// Api Endpoints for Publisher service

func NewPublisherEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Publisher service

type PublisherService interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...client.CallOption) (*PublishResponse, error)
}

type publisherService struct {
	c    client.Client
	name string
}

func NewPublisherService(name string, c client.Client) PublisherService {
	return &publisherService{
		c:    c,
		name: name,
	}
}

func (c *publisherService) Publish(ctx context.Context, in *PublishRequest, opts ...client.CallOption) (*PublishResponse, error) {
	req := c.c.NewRequest(c.name, "Publisher.Publish", in)
	out := new(PublishResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Publisher service

type PublisherHandler interface {
	Publish(context.Context, *PublishRequest, *PublishResponse) error
}

func RegisterPublisherHandler(s server.Server, hdlr PublisherHandler, opts ...server.HandlerOption) error {
	type publisher interface {
		Publish(ctx context.Context, in *PublishRequest, out *PublishResponse) error
	}
	type Publisher struct {
		publisher
	}
	h := &publisherHandler{hdlr}
	return s.Handle(s.NewHandler(&Publisher{h}, opts...))
}

type publisherHandler struct {
	PublisherHandler
}

func (h *publisherHandler) Publish(ctx context.Context, in *PublishRequest, out *PublishResponse) error {
	return h.PublisherHandler.Publish(ctx, in, out)
}

// Api Endpoints for Subscriber service

func NewSubscriberEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Subscriber service

type SubscriberService interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error)
}

type subscriberService struct {
	c    client.Client
	name string
}

func NewSubscriberService(name string, c client.Client) SubscriberService {
	return &subscriberService{
		c:    c,
		name: name,
	}
}

func (c *subscriberService) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error) {
	req := c.c.NewRequest(c.name, "Subscriber.Subscribe", in)
	out := new(SubscribeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Subscriber service

type SubscriberHandler interface {
	Subscribe(context.Context, *SubscribeRequest, *SubscribeResponse) error
}

func RegisterSubscriberHandler(s server.Server, hdlr SubscriberHandler, opts ...server.HandlerOption) error {
	type subscriber interface {
		Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error
	}
	type Subscriber struct {
		subscriber
	}
	h := &subscriberHandler{hdlr}
	return s.Handle(s.NewHandler(&Subscriber{h}, opts...))
}

type subscriberHandler struct {
	SubscriberHandler
}

func (h *subscriberHandler) Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error {
	return h.SubscriberHandler.Subscribe(ctx, in, out)
}
