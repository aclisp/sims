syntax = "proto3";

package sims.proto;
option go_package = "github.com/aclisp/sims/proto";

enum ErrorCode {
    ERR_UNSPECIFIED = 0;
    ERR_NOT_FOUND = 1;
    ERR_ALREADY_EXISTS = 2;
    ERR_MISSING_USERID = 3;
    ERR_MISSING_HEADER = 4;
    ERR_NO_CONSUMER = 5;
    ERR_MISSING_EVENT = 6;
    ERR_INVALID_EVENT_TYPE = 7;
}

enum EventType {
    EVT_HEARTBEAT = 0;
    EVT_TEXT = 1;
    EVT_JSON = 2;
    EVT_PROTOBUF = 3;
    EVT_BINARY = 4;
}

message ServerConfig {
}

message Header {
    string request_id = 1; // RPC request scope
    string user_id    = 2; // User scope
    string device_id  = 3; // device scope
    string user_agent = 4;
}

message Event {
    EventType type = 1;
    bytes data = 2;
}

message Selector {
    string user_agent = 1;
}

service Hub {
    rpc Connect (ConnectRequest) returns (ConnectResponse);
    rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse);
    rpc Disconnect (DisconnectRequest) returns (DisconnectResponse);
    rpc List (ListRequest) returns (ListResponse);
}

service Streamer {
    rpc Events (EventsRequest) returns (stream Event);
}

service Publisher {
    rpc Unicast (UnicastRequest) returns (UnicastResponse);
    rpc Multicast (MulticastRequest) returns (MulticastResponse);
}

message EventsRequest {
    Header header = 1;
}

message ConnectRequest {
    Header header = 1;
}

message ConnectResponse {
}

message DisconnectRequest {
    Header header = 1;
}

message DisconnectResponse {
}

message UnicastRequest {
    string user_id = 1;
    Event event = 2;
    Selector user_selector = 3;
}

message UnicastResponse {
}

message MulticastRequest {
    repeated string user_id = 1;
    Event event = 2;
    map<string, Selector> user_selector = 3;
}

message MulticastResponse {
    map<string, ErrorCode> user_errcode = 1;
}

message HeartbeatRequest {
    Header header = 1;
}

message HeartbeatResponse {
}

message ListRequest {
}

message Channel {
    string user_id = 1;
    string device_id = 2;
    string birth = 3;
    string last_heartbeat = 4;
    int32 active = 5;
}

message ListResponse {
    repeated Channel channels = 1;
}
